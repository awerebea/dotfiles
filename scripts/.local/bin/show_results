#! /usr/bin/env bash

g_envs_pattern=""
g_pattern="(error|output)\.txt"
g_positional_args+=("$1")

VALID_ENVS=(
    sand
    dev
    test
    stage
    prod
    shared
    audit
    p2dev
    p2test
)

# Define colors
COLOR_RED='\e[1;31m'    # Red
NO_COLOR='\e[0m'        # No Color

__join_by() {
    local d f
    d="${1-}" f="${2-}"
    if shift 2; then
        printf %s "$f" "${@/#/$d}"
    fi
}

_process_cmd_options() {
    while [[ -n "$1" ]]; do
        case "$1" in
            "-e" | "--err" | "--error" | "--errors" )
                g_pattern="error\.txt"
                ;;
            "-o" | "--out" | "--output" | "--outputs" )
                g_pattern="output\.txt"
                ;;
            *)
                g_positional_args+=("$1")
                ;;
        esac
        shift
    done

    g_envs_raw=()
    for ((i = 0; i < ${#g_positional_args[@]}; i++)); do
        read -ra splitted_arg <<<"$(echo "${g_positional_args[i]}" | tr ";,/" " ")"
        g_envs_raw+=("${splitted_arg[@]}")
    done

    # Remove duplicates
    declare -A g_seen_elements
    g_envs=()
    for element in "${g_envs_raw[@]}"; do
        if [ "${g_seen_elements[$element]}" = "" ]; then
            g_envs+=("$element")
            g_seen_elements["$element"]=1
        fi
    done

    for env_name in "${g_envs[@]}"; do
        if [[ ! "${VALID_ENVS[*]}" =~ $env_name ]]; then
            echo -e "${COLOR_RED}ERROR:${NO_COLOR} Invalid environment passed."
            exit 1
        fi
    done
    if [ "${#g_envs[@]}" -gt 1 ]; then
        g_envs_pattern="{$(__join_by ',' "${g_envs[@]}")}"
    elif [ "${#g_envs[@]}" -gt 0 ]; then
        g_envs_pattern="${g_envs[0]}"
    fi
}

# Main
_main() {
    _process_cmd_options "$@"
    if [ "$g_envs_pattern" = "" ]; then
        g_envs_pattern="{$(__join_by ',' "${VALID_ENVS[@]}")}"
    fi
    if command -v fd &>/dev/null; then
        eval "fd -IH -tf \"$g_pattern\" ./result/$g_envs_pattern 2>/dev/null | \
            sort | xargs tail -v -n +1 | less -NRWr --use-color"
    else
        if [ "$g_pattern" = "(error|output)\.txt" ]; then
            # Use parameter expansion to escape "(", ")" and "|"
            g_pattern="${g_pattern//(/\\(}"
            g_pattern="${g_pattern//)/\\)}"
            g_pattern="${g_pattern//|/\\|}"
        fi
        eval "find ./result/$g_envs_pattern -type f -regex \".*$g_pattern\" 2>/dev/null | \
            sort | xargs tail -v -n +1 | less -NRWr --use-color"
    fi
}

_main "$@"
