#!/usr/bin/env bash

# Check if the commit hash is provided
if [ $# -eq 0 ]
then
    echo "Please provide the merge commit hash as a parameter."
    exit 1
fi

# Collect the commit hash
commit_hash=$1

# Check if the commit hash is a merge commit
if [ $(git cat-file -p $commit_hash | grep parent | wc -l) -lt 2 ]
then
    echo "The provided commit hash is not a merge commit."
    exit 1
fi

# Get the list of commits involved in the merge commit
commit_list=$(git log --pretty=format:'%H' $commit_hash^..$commit_hash)

# Declare an array to store the modified files
declare -a modified_files_array

# Loop over each commit hash
for commit in $commit_list
do
    # Get the list of files modified in each commit
    modified_files=$(git diff-tree --no-commit-id --name-only -r $commit)
    
    # Add the modified files to the array
    for file in $modified_files
    do
        modified_files_array+=($file)
    done
done

# Sort the array, remove duplicate entries, and print the result
sorted_unique_files=( $(printf '%s\n' "${modified_files_array[@]}" | sort -u) )

echo "Sorted list of unique files modified in commits related to merge commit $commit_hash:"
for file in "${sorted_unique_files[@]}"
do
   echo "$file"
done
