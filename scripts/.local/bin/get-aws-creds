#!/usr/bin/env bash

VALID_ENVS=(
    "all"
    example-{dev,test,prod}
)

_check_inputs() {
    if ! command -v aws-vault &>/dev/null; then
        echo "aws-vault is not installed." >&2
        exit 1
    fi

    if [ "$#" -lt 1 ]; then
        printf "The desired AWS profile(s) must be passed as arguments.\n" >&2
        exit 1
    fi
}

_get_envs() {
    local -a envs_raw=()
    local arg
    for arg in "$@"; do
        while IFS= read -r line; do
            envs_raw+=("$line")
        done < <(echo "$arg" | tr ";,/" "\n")
    done

    # Remove duplicates
    local -A seen
    local -a envs=()
    local element
    for element in "${envs_raw[@]}"; do
        if [[ -z "${seen[$element]}" ]]; then
            envs+=("$element")
            seen["$element"]=1
        fi
    done

    local env
    for env in "${envs[@]}"; do
        # shellcheck disable=SC2076
        if [[ ! "${VALID_ENVS[*]}" =~ "$env" ]]; then
            echo "Invalid environment passed." >&2
            exit 1
        fi
        if [ "$env" = "all" ]; then
            envs=("${VALID_ENVS[@]}")
            unset 'envs[0]' # remove "all" from an array of envs
            break
        fi
    done

    for env in "${envs[@]}"; do
        echo "$env"
    done
}

_main() {
    _check_inputs "$@"

    local -a envs=()
    local line
    while IFS= read -r line; do
        envs+=("$line")
    done < <(_get_envs "$@")

    local creds creds_temp creds_addon creds_temp_dir
    creds="$HOME/.aws/credentials"
    creds_temp="$HOME/.aws/tmp-creds/tmp.credentials"
    creds_addon="$HOME/.aws/credentials_addon"
    creds_temp_dir="$(dirname "$creds_temp")"

    mkdir -p "$creds_temp_dir" 2>/dev/null || exit 1
    : >"$creds_temp" # Clear the file
    local env
    for env in "${envs[@]}"; do
        aws-vault exec "$env" --json >"$creds_temp_dir/$env.json"
        {
            echo "[$env]"
            echo "aws_access_key_id=$(jq .AccessKeyId "$creds_temp_dir/$env.json")"
            echo "aws_secret_access_key=$(jq .SecretAccessKey "$creds_temp_dir/$env.json")"
            echo "aws_session_token=$(jq .SessionToken "$creds_temp_dir/$env.json")"
            echo
        } >>"$creds_temp" || exit 1
    done
    cp "$creds_temp" "$creds"

    [ -f "$creds_addon" ] && echo >>"$creds_temp" && cat "$creds_addon" >>"$creds"
}

# Start program here
_main "$@"
