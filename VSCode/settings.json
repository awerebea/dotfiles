// vim: ft=jsonc
{
    "terminal.integrated.fontFamily": "MesloLGS NF",
    "terminal.integrated.fontSize": 12,
    "terminal.integrated.lineHeight": 1,
    "editor.fontFamily": "MesloLGS NF",
    "editor.fontSize": 13,
    "editor.renderControlCharacters": true,
    // Disable current word highlight
    "editor.occurrencesHighlight": false,
    // Disable current line highlight
    "editor.renderLineHighlight": "gutter",
    // Set terminal cursor style
    "terminal.integrated.cursorStyle": "block",
    "terminal.integrated.cursorBlinking": true,
    // Colorscheme
    "workbench.colorTheme": "Cobalt2",
    // Colors
    // Commented to use with Cobalt2 theme
    // "workbench.colorCustomizations": {
    //   // Terminal colors
    //   "terminal.foreground" : "#f8f8f0",
    //   "terminal.background" : "#2d2a2e",
    //   // Line numbers color
    //   "editorLineNumber.foreground": "#999999",
    //   // Active line number color
    //   "editorLineNumber.activeForeground": "#666666",
    //   // Background of Gutter column
    //   "editorGutter.background" : "#232024",
    //   // StatusBar font color
    //   "statusBar.foreground" : "#a8a8a0"
    // },
    // Icons settings
    "workbench.iconTheme": "vscode-icons",
    "editor.rulers": [100, 120],
    "editor.wordWrap": "wordWrapColumn",
    "editor.wrappingIndent": "same",
    // Wrap long lines at N-th column
    "editor.wordWrapColumn": 100,
    "[markdown]": {
        "editor.wordWrap": "wordWrapColumn",
        "editor.quickSuggestions": {
            "comments": "off",
            "strings": "off",
            "other": "off"
        }
    },
    // Show whitespace characters
    "editor.renderWhitespace": "all",
    // Files associations
    "files.associations": {
        "*.ctmpl": "hcl",
        "*.tf": "terraform",
        "*.tfvars": "terraform",
        "[Jj]enkinsfile*": "jenkinsfile"
    },
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter.notebook.ipynb"
    },
    // Open in Vim fullscreen
    "multiCommand.commands": [
        {
            "command": "multiCommand.openInVimFullscreen",
            "sequence": [
                "open-in-vim.open",
                "workbench.action.toggleMaximizedPanel"
            ]
        }
    ],
    // Plugins and extentions settings
    // Vim plugin settings
    "vim.easymotion": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.surround": true,
    // Disable VSCodeVim extension
    "vim.disableExtension": false,
    // In visual mode, start a search with * or # using the current selection
    "vim.visualstar": true,
    // Do not open folds when moving with j/k
    "vim.foldfix": true,
    // Keybinds in Insert mode
    "vim.insertModeKeyBindings": [],
    // Keybinds in Normal mode
    "vim.normalModeKeyBindings": [
        {
            "before": ["<leader>", "m"],
            "commands": ["bookmarks.toggle"]
        },
        {
            "before": ["<leader>", "b"],
            "commands": ["bookmarks.list"]
        },
        {
            "before": ["<leader>", "r", "n"],
            "commands": ["editor.action.rename"],
            "when": [
                "editorHasRenameProvider",
                "editorTextFocus",
                "!editorReadonly"
            ]
        }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        // Turn off search highlighting
        {
            "before": ["<C-n>"],
            "commands": [":nohl"]
        },
        {
            "before": ["<Leader>", "/"],
            "commands": [":nohl"]
        },
        {
            "before": ["<Esc>", "<Esc>"],
            "commands": [":nohl"]
        },
        // Show commands panel
        {
            "before": ["<Leader>", "p"],
            "commands": ["workbench.action.showCommands"]
        },
        // Show symbols in file
        {
            "before": ["<Leader>", "t"],
            "commands": ["workbench.action.gotoSymbol"]
        },
        // Show symbols in workspace
        {
            "before": ["<Leader>", "a", "t"],
            "commands": ["workbench.action.showAllSymbols"]
        },
        // Easier Tab Handling
        {
            "before": ["<Leader>", "t", "t"],
            "commands": [":tabedit"]
        },
        {
            "before": ["<Leader>", "t", "h"],
            "commands": [":tabfirst"]
        },
        {
            "before": ["<Leader>", "t", "n"],
            "commands": [":tabnext"]
        },
        {
            "before": ["<Leader>", "t", "p"],
            "commands": [":tabprev"]
        },
        {
            "before": ["<Leader>", "t", "l"],
            "commands": [":tablast"]
        },
        {
            "before": ["<Leader>", "t", "d"],
            "commands": [":tabclose"]
        },
        {
            "before": ["<Leader>", "t", "o"],
            "commands": [":tabonly"]
        },
        // Show project files list filter
        {
            "before": ["<Leader>", "f"],
            "commands": ["workbench.action.quickOpen"]
        },
        // Show all editors by most recently used
        {
            "before": ["<Leader>", "<enter>"],
            "commands": ["workbench.action.showAllEditorsByMostRecentlyUsed"]
        },
        // Show all editors by appearance
        {
            "before": ["<Leader>", "<Leader>", "<enter>"],
            "commands": ["workbench.action.showAllEditors"]
        },
        // Find[and Replace] text in all files of project
        {
            "before": ["<Leader>", "r", "g"],
            "commands": ["workbench.action.findInFiles"]
        },
        // Open file in Vim (fullscreen)
        {
            "before": ["<Leader>", "v", "v"],
            "commands": ["multiCommand.openInVimFullscreen"]
        },
        // Toggle auto hard-wrap long lines
        {
            "before": ["<Leader>", "a", "w"],
            "commands": ["rewrap.toggleAutoWrap"]
        },
        // Spell checking
        // Toggle for current workspace
        {
            "before": ["<Leader>", "s", "s", "a"],
            "commands": ["cSpell.toggleEnableSpellChecker"]
        },
        // Open quickfix list as top menu
        {
            "before": ["z", "="],
            "commands": ["keyboard-quickfix.openQuickFix"]
        },
        // Open file explorer
        {
            "before": ["<Leader>", "e"],
            "commands": ["workbench.view.explorer"]
        },
        // Easymotion
        {
            "before": ["<Leader>", "<Leader>", "d"],
            "after": ["<Leader>", "<Leader>", "2", "s"]
        },
        // Find and replace in files
        {
            "before": ["<Leader>", "f", "f"],
            "commands": ["workbench.action.findInFiles"]
        },
        {
            "before": ["<Leader>", "f", "r"],
            "commands": ["workbench.action.replaceInFiles"]
        },
        {
            "before": ["]", "g"],
            "commands": ["editor.action.marker.next"],
            "silent": true
        },
        {
            "before": ["[", "g"],
            "commands": ["editor.action.marker.prev"],
            "silent": true
        }
    ],
    // Keybinds in Visual mode
    "vim.visualModeKeyBindingsNonRecursive": [
        // Paste without overriding the current register
        {
            "before": ["p"],
            "after": ["p", "g", "v", "y"]
        },
        // Easymotion
        {
            "before": ["<Leader>", "<Leader>", "d"],
            "after": ["<Leader>", "<Leader>", "2", "s"]
        }
    ],
    // Leader key is '\' (back slash) by default
    "vim.leader": "<space>",
    "vim.handleKeys": {
        "<C-a>": true,
        "<C-f>": true
    },
    // Set a limit on the length of a string
    "vim.textwidth": 80,
    // Kubernetes plugin settings
    "vs-kubernetes": {
        "vscode-kubernetes.minikube-path.linux": "/home/andrei/.vs-kubernetes/tools/minikube/linux-amd64/minikube",
        "vscode-kubernetes.helm-path.linux": "/home/andrei/.vs-kubernetes/tools/helm/linux-amd64/helm"
    },
    "C_Cpp.updateChannel": "Insiders",
    "terminal.external.linuxExec": "/usr/bin/konsole",
    // Python module settings
    "python.linting.enabled": true,
    "python.linting.pylintUseMinimalCheckers": false,
    "python.linting.pylintEnabled": true,
    "python.linting.flake8Enabled": true,
    "python.linting.pycodestyleEnabled": true,
    "python.linting.pydocstyleEnabled": true,
    "python.analysis.typeCheckingMode": "basic", // basic or strict
    // MSSQL db connections
    "mssql.connections": [
        {
            "server": "{{put-server-name-here}}",
            "database": "{{put-database-name-here}}",
            "user": "{{put-username-here}}",
            "password": ""
        }
    ],
    // Spell and dictionary settings
    // Spell check only comments for specified languages
    "cSpell.languageSettings": [
        // This one works with Python
        {
            "languageId": "python",
            "includeRegExpList": [
                "/#.*/",
                "/('''|\"\"\")[^\\1]+?\\1/g",
                "strings"
            ]
        },
        // This one works with JavaScript, Typescript, etc
        {
            "languageId": "javascript,typescript",
            "includeRegExpList": ["CStyleComment", "strings"]
        },
        // Use with cpp or c files
        {
            "languageId": "cpp,c",
            // Turn off compound words, because it is only checking strings.
            "allowCompoundWords": false,
            // Only check comments and strings
            "includeRegExpList": ["CStyleComment", "string"],
            // Exclude includes, because they are also strings.
            "ignoreRegExpList": ["/#[ ]*include.*/"]
        }
    ],
    // Custom user words list
    "cSpell.userWords": [],
    // Editor startup
    "workbench.startupEditor": "newUntitledFile",
    // Indentation settings
    "[typescript]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[jenkinsfile]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[c]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": false,
        "editor.tabSize": 4
    },
    "[cpp]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": false,
        "editor.tabSize": 4
    },
    // Terraform settings
    "[terraform]": {
        // Format on file saving
        "editor.formatOnSave": true
    },
    // Characters that will be used as word separators when doing word related navigations or operations
    "editor.wordSeparators": "_`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
    "commentAnchors.tags.list": [
        {
            "tag": "DEBUG",
            "scope": "file",
            "iconColor": "default",
            "highlightColor": "#D75FFF",
            "styleComment": false
        }
    ],
    "editor.formatOnSave": true,
    "redhat.telemetry.enabled": true,
    "vscode-neovim.neovimExecutablePaths.linux": "/usr/local/bin/nvim",
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "prettier.tabWidth": 4,
    // Disable default json formatter
    "json.format.enable": false,
    "vim.timeout": 500,
    "python.linting.flake8Args": ["--max-line-length=99"],
    "python.formatting.autopep8Args": ["--max-line-length=99"],
    "python.linting.pycodestyleArgs": ["--max-line-length=99"],
    // Native bracket pair colorization
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": "active",
    // Custom tags for the parser to use
    "yaml.customTags": [
        "!And",
        "!If",
        "!Not",
        "!Equals",
        "!Or",
        "!FindInMap sequence",
        "!Base64",
        "!Cidr",
        "!Ref",
        "!Sub",
        "!GetAtt",
        "!GetAZs",
        "!ImportValue",
        "!Select",
        "!Select sequence",
        "!Split",
        "!Join sequence"
    ],
    // Enable/disable default YAML formatter (requires restart)
    "yaml.format.enable": true,
    "terminal.integrated.defaultProfile.linux": "my tmux",
    "terminal.integrated.profiles.linux": {
        "my tmux": {
            "path": "/home/andrei/.local/bin/vscode_terminal.sh"
        }
    },
    "editor.minimap.enabled": false,
    "explorer.confirmDragAndDrop": false,
    "groovyLint.enable": false,
    "window.zoomLevel": 1
}
