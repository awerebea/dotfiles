// vim: ft=jsonc
{
    // To improve performance
    "extensions.experimental.affinity": {
        "vscodevim.vim": 1
    },
    // Leader key is '\' (back slash) by default
    "vim.leader": "space",
    "editor.lineNumbers": "on",
    "editor.cursorSurroundingLines": 8,
    "vim.replaceWithRegister": true,
    "vim.highlightedyank.enable": true,
    "vim.highlightedyank.color": "#a9dc7660",
    "vim.useCtrlKeys": true,
    "vim.incsearch": true,
    "vim.hlsearch": true,
    "vim.sneak": true,
    "vim.handleKeys": {
        "<C-a>": true,
        "<C-f>": true,
        "<C-i>": true,
        "<C-o>": true,
        "<C-j>": false,
        "<C-k>": false,
        "<C-n>": false,
        "<C-p>": false
    },
    // Set a limit on the length of a string
    "vim.textwidth": 120,
    "vim.sneakUseIgnorecaseAndSmartcase": true,
    "vim.camelCaseMotion.enable": true,
    //
    "vim.searchMatchColor": "#a9dc7660",
    // Plugins and extentions settings
    "vim.smartRelativeLine": false,
    "vim.easymotion": true,
    "vim.useSystemClipboard": true,
    "vim.ignorecase": true,
    "vim.surround": true,
    // Disable VSCodeVim extension
    "vim.disableExtension": false,
    // In visual mode, start a search with * or # using the current selection
    "vim.visualstar": true,
    // Do not open folds when moving with j/k
    // Switched off, because slows down {count}j/{count}k movements.
    "vim.foldfix": false,
    // Keybinds in Insert mode
    "vim.insertModeKeyBindings": [],
    // Keybinds in Normal mode
    "vim.normalModeKeyBindings": [],
    "vim.normalModeKeyBindingsNonRecursive": [
        // Split window
        {
            "before": ["<leader>", "\\"],
            "commands": ["workbench.action.splitEditorRight"]
        },
        {
            "before": ["<leader>", "-"],
            "commands": ["workbench.action.splitEditorDown"]
        },
        {
            "before": ["<leader>", "m"],
            "commands": ["bookmarks.toggle"]
        },
        {
            "before": ["<leader>", "b"],
            "commands": ["bookmarks.list"]
        },
        {
            "before": ["<leader>", "r", "n"],
            "commands": ["editor.action.rename"]
        },
        // Save file
        {
            "before": ["<leader>", "w"],
            "commands": ["workbench.action.files.save"]
        },
        // Go to changes
        {
            "before": ["]", "c"],
            "commands": [
                "workbench.action.editor.nextChange",
                "workbench.action.compareEditor.nextChange"
            ]
        },
        {
            "before": ["[", "c"],
            "commands": [
                "workbench.action.editor.previousChange",
                "workbench.action.compareEditor.previousChange"
            ]
        },
        // Go to definition
        {
            "before": ["g", "d"],
            "commands": ["editor.action.revealDefinition"]
        },
        // Go to reference
        {
            "before": ["g", "r"],
            "commands": ["editor.action.goToReferences"]
        },
        // Preview change
        {
            "before": ["g", "h", "p"],
            "commands": ["editor.action.dirtydiff.next"]
        },
        {
            "before": ["g", "h", "P"],
            "commands": ["editor.action.dirtydiff.previous"]
        },
        // Revert change
        {
            "before": ["g", "h", "r"],
            "commands": ["git.revertSelectedRanges"]
        },
        // Stage change
        {
            "before": ["g", "h", "s"],
            "commands": ["git.stageSelectedRanges"]
        },
        // Unstage change
        {
            "before": ["g", "h", "u"],
            "commands": ["git.unstageSelectedRanges"]
        },
        // Turn off search highlighting
        {
            "before": ["<C-n>"],
            "commands": [":nohl"]
        },
        {
            "before": ["<Leader>", "/"],
            "commands": [":nohl"]
        },
        {
            "before": ["<Esc>", "<Esc>"],
            "commands": [":nohl"]
        },
        // Show commands panel
        {
            "before": ["<Leader>", "p"],
            "commands": ["workbench.action.showCommands"]
        },
        // Show symbols in file
        {
            "before": ["<Leader>", "t"],
            "commands": ["workbench.action.gotoSymbol"]
        },
        // Show symbols in workspace
        {
            "before": ["<Leader>", "a", "t"],
            "commands": ["workbench.action.showAllSymbols"]
        },
        // Easier Tab Handling
        {
            "before": ["<Leader>", "t", "t"],
            "commands": [":tabedit"]
        },
        {
            "before": ["<Leader>", "t", "h"],
            "commands": [":tabfirst"]
        },
        {
            "before": ["<Leader>", "t", "n"],
            "commands": [":tabnext"]
        },
        {
            "before": ["<Leader>", "t", "p"],
            "commands": [":tabprev"]
        },
        {
            "before": ["<Leader>", "t", "l"],
            "commands": [":tablast"]
        },
        {
            "before": ["<Leader>", "t", "d"],
            "commands": [":tabclose"]
        },
        {
            "before": ["<Leader>", "t", "o"],
            "commands": [":tabonly"]
        },
        // Show project files list filter
        {
            "before": ["<Leader>", "f"],
            "commands": ["workbench.action.quickOpen"]
        },
        // Show all editors by most recently used
        {
            "before": ["<Leader>", "<enter>"],
            "commands": ["workbench.action.showAllEditorsByMostRecentlyUsed"]
        },
        // Show all editors by appearance
        {
            "before": ["<Leader>", "<Leader>", "<enter>"],
            "commands": ["workbench.action.showAllEditors"]
        },
        // Find[and Replace] text in all files of project
        {
            "before": ["<Leader>", "r", "g"],
            "commands": ["workbench.action.findInFiles"]
        },
        // Open file in Vim (fullscreen)
        {
            "before": ["<Leader>", "v", "v"],
            "commands": ["multiCommand.openInVimFullscreen"]
        },
        // Toggle auto hard-wrap long lines
        {
            "before": ["<Leader>", "a", "w"],
            "commands": ["rewrap.toggleAutoWrap"]
        },
        // Spell checking
        // Toggle for current workspace
        {
            "before": ["<Leader>", "s", "c", "e"],
            "commands": ["cSpell.toggleEnableSpellChecker"]
        },
        // Open quickfix list as top menu
        {
            "before": ["z", "="],
            "commands": ["keyboard-quickfix.openQuickFix"]
        },
        // Open file explorer
        {
            "before": ["<Leader>", "e"],
            "commands": ["workbench.view.explorer"]
        },
        // Easymotion
        {
            "before": ["<Leader>", "<Leader>", "d"],
            "after": ["<Leader>", "<Leader>", "2", "s"]
        },
        // Find and replace in files
        {
            "before": ["<Leader>", "f", "f"],
            "commands": ["workbench.action.findInFiles"]
        },
        {
            "before": ["<Leader>", "f", "r"],
            "commands": ["workbench.action.replaceInFiles"]
        },
        {
            "before": ["]", "d"],
            "commands": ["editor.action.marker.next"],
            "silent": true
        },
        {
            "before": ["[", "d"],
            "commands": ["editor.action.marker.prev"],
            "silent": true
        },
        {
            "before": ["u"],
            "after": [],
            "commands": [
                {
                    "command": "undo",
                    "args": []
                }
            ]
        },
        {
            "before": ["<C-r>"],
            "after": [],
            "commands": [
                {
                    "command": "redo",
                    "args": []
                }
            ]
        }
    ],
    // Keybinds in Visual mode
    "vim.visualModeKeyBindingsNonRecursive": [
        // Paste without overriding the current register
        {
            "before": ["p"],
            "after": ["p", "g", "v", "y"]
        },
        // Easymotion
        {
            "before": ["<Leader>", "<Leader>", "d"],
            "after": ["<Leader>", "<Leader>", "2", "s"]
        },
        // Revert change
        {
            "before": ["g", "h", "r"],
            "commands": ["git.revertSelectedRanges"]
        },
        // Stage change
        {
            "before": ["g", "h", "s"],
            "commands": ["git.stageSelectedRanges"]
        },
        // Unstage change
        {
            "before": ["g", "h", "u"],
            "commands": ["git.unstageSelectedRanges"]
        }
    ],
    "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font",
    "terminal.integrated.fontSize": 16,
    "terminal.integrated.fontWeight": "200",
    "terminal.integrated.lineHeight": 1,
    "editor.fontFamily": "JetBrainsMono Nerd Font",
    "editor.fontSize": 18,
    "editor.fontWeight": "200",
    "editor.renderControlCharacters": true,
    // Disable current word highlight
    "editor.occurrencesHighlight": "off",
    // Disable current line highlight
    "editor.renderLineHighlight": "gutter",
    // Set terminal cursor style
    "terminal.integrated.cursorStyle": "block",
    "terminal.integrated.cursorBlinking": true,
    // Colorscheme
    "workbench.colorTheme": "Catppuccin Macchiato",
    "editor.rulers": [100, 120, 140],
    "editor.wordWrap": "wordWrapColumn",
    "editor.wrappingIndent": "same",
    // Wrap long lines at N-th column
    "editor.wordWrapColumn": 120,
    "[markdown]": {
        "editor.wordWrap": "wordWrapColumn",
        "editor.quickSuggestions": {
            "comments": "off",
            "strings": "off",
            "other": "off"
        }
    },
    // Show whitespace characters
    "editor.renderWhitespace": "all",
    // Files associations
    "files.associations": {
        "*.ctmpl": "hcl",
        "*.tf": "terraform",
        "*.tfvars": "terraform",
        "[Jj]enkinsfile*": "jenkinsfile",
        "*.json.tpl*": "json"
    },
    // Open in Vim fullscreen
    "multiCommand.commands": [
        {
            "command": "multiCommand.openInVimFullscreen",
            "sequence": [
                "open-in-vim.open",
                "workbench.action.toggleMaximizedPanel"
            ]
        }
    ],
    "terminal.external.linuxExec": "/usr/bin/konsole",
    // Python module settings
    "python.formatting.autopep8Args": ["--max-line-length=99"],
    "python.formatting.provider": "yapf", // yapf or autopep8 or black
    "python.formatting.autoImportSorting": false,
    "python.formatting.formatOnSave": false,
    "python.formatting.yapfArgs": [
        "--style={based_on_style: google, column_limit: 99, indent_width: 4}"
    ],
    "python.linting.enabled": true,
    "python.linting.flake8Args": ["--max-line-length=99"],
    "python.linting.flake8Enabled": true,
    "python.linting.pycodestyleArgs": ["--max-line-length=99"],
    "python.linting.pycodestyleEnabled": true,
    "python.linting.pydocstyleEnabled": true,
    "python.linting.pylintEnabled": true,
    "python.linting.pylintUseMinimalCheckers": false,
    "python.analysis.typeCheckingMode": "basic", // basic or strict
    "python.analysis.diagnosticSeverityOverrides": {
        "reportGeneralTypeIssues": "none"
    },
    // Spell and dictionary settings
    // Spell check only comments for specified languages
    "cSpell.languageSettings": [
        // This one works with Python
        {
            "languageId": "python",
            "includeRegExpList": [
                "/#.*/",
                "/('''|\"\"\")[^\\1]+?\\1/g",
                "strings"
            ]
        },
        // This one works with JavaScript, Typescript, etc
        {
            "languageId": "javascript,typescript",
            "includeRegExpList": ["CStyleComment", "strings"]
        },
        // Use with cpp or c files
        {
            "languageId": "cpp,c",
            // Turn off compound words, because it is only checking strings.
            "allowCompoundWords": false,
            // Only check comments and strings
            "includeRegExpList": ["CStyleComment", "string"],
            // Exclude includes, because they are also strings.
            "ignoreRegExpList": ["/#[ ]*include.*/"]
        }
    ],
    // Custom user words list
    "cSpell.userWords": ["esbenp"],
    // Editor startup
    "workbench.startupEditor": "newUntitledFile",
    // Indentation settings
    "[typescript]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[jenkinsfile]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[c]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": false,
        "editor.tabSize": 4
    },
    "[cpp]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": false,
        "editor.tabSize": 4
    },
    // Terraform settings
    "[terraform]": {
        "editor.formatOnSave": true
    },
    "[hcl]": {
        "editor.formatOnSave": true
    },
    "[json]": {
        "editor.formatOnSave": true
    },
    // Characters that will be used as word separators when doing word related navigations or operations
    "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
    "commentAnchors.tags.anchors": {
        "DEBUG": {
            "scope": "file",
            "iconColor": "default",
            "highlightColor": "#D75FFF",
            "styleComment": false
        }
    },
    "editor.formatOnSave": true,
    "editor.formatOnSaveMode": "file",
    "editor.codeActionsOnSave": {
        "source.organizeImports": "explicit"
    },
    "redhat.telemetry.enabled": false,
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "prettier.tabWidth": 4,
    // Disable default json formatter
    "json.format.enable": false,
    "vim.timeout": 500,
    // Native bracket pair colorization
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": "active",
    // Custom tags for the parser to use
    "yaml.customTags": [
        "!And",
        "!If",
        "!Not",
        "!Equals",
        "!Or",
        "!FindInMap sequence",
        "!Base64",
        "!Cidr",
        "!Ref",
        "!Sub",
        "!GetAtt",
        "!GetAZs",
        "!ImportValue",
        "!Select",
        "!Select sequence",
        "!Split",
        "!Join sequence"
    ],
    // Enable/disable default YAML formatter (requires restart)
    "yaml.format.enable": true,
    "explorer.confirmDragAndDrop": false,
    "files.eol": "\n",
    "code-runner.enableAppInsights": false,
    "code-runner.ignoreSelection": false, // Incompatible with code-runner.runInTerminal: true
    "code-runner.runInTerminal": false,
    "terminal.integrated.commandsToSkipShell": [
        "-code-runner.run",
        "-keybindings.editor.addKeybinding",
        "-keybindings.editor.defineWhenExpression",
        "-markdown.showPreviewToSide",
        "-togglePeekWidgetFocus",
        "-views.moveViewDown",
        "-views.moveViewLeft",
        "-views.moveViewRight",
        "-views.moveViewUp",
        "-workbench.action.closeAllEditors",
        "-workbench.action.closeAllGroups",
        "-workbench.action.closeEditorsInGroup",
        "-workbench.action.closeFolder",
        "-workbench.action.closeUnmodifiedEditors",
        "-workbench.action.editor.changeLanguageMode",
        "-workbench.action.files.copyPathOfActiveFile",
        "-workbench.action.files.openFolder",
        "-workbench.action.files.openLocalFolder",
        "-workbench.action.files.revealActiveFileInWindows",
        "-workbench.action.files.saveWithoutFormatting",
        "-workbench.action.files.showOpenedFileInNewWindow",
        "-workbench.action.focusAboveGroup",
        "-workbench.action.focusBelowGroup",
        "-workbench.action.focusLeftGroup",
        "-workbench.action.focusRightGroup",
        "-workbench.action.joinEditorInGroup",
        "-workbench.action.keepEditor",
        "-workbench.action.keybindingsReference",
        "-workbench.action.moveActiveEditorGroupDown",
        "-workbench.action.moveActiveEditorGroupLeft",
        "-workbench.action.moveActiveEditorGroupRight",
        "-workbench.action.moveActiveEditorGroupUp",
        "-workbench.action.nextEditorInGroup",
        "-workbench.action.openGlobalKeybindings",
        "-workbench.action.output.toggleOutput",
        "-workbench.action.pinEditor",
        "-workbench.action.previousEditorInGroup",
        "-workbench.action.selectTheme",
        "-workbench.action.showAllEditors",
        "-workbench.action.showTreeHover",
        "-workbench.action.splitEditorInGroup",
        "-workbench.action.splitEditorOrthogonal",
        "-workbench.action.toggleZenMode",
        "-workbench.action.unpinEditor",
        "-workbench.files.action.compareWithClipboard",
        "-workbench.files.action.compareWithSaved"
    ],
    "[python]": {
        "editor.formatOnType": true
    },
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": false,
    "workbench.list.openMode": "doubleClick",
    "editor.inlineSuggest.enabled": true,
    "cSpell.customDictionaries": {
        "custom-dictionary-user": {
            "name": "custom-dictionary-user",
            "path": "~/.cspell/custom-dictionary-user.txt",
            "addWords": true,
            "scope": "user"
        }
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true,
        "**/.git/**": true,
        "**/.venv/**": true,
        "**/.terragrunt-cache/**": true
    },
    "terminal.integrated.allowChords": false,
    "terminal.integrated.drawBoldTextInBrightColors": false,
    "terminal.integrated.shellIntegration.enabled": false,
    "window.title": "${rootName}${separator}${profileName}${separator}VSCode",
    "toggleboolean.mapping": {
        "True": "False",
        "False": "True",
        "true": false,
        "false": true,
        "yes": "no",
        "no": "yes",
        "on": "off",
        "off": "on"
    },
    "workbench.sideBar.location": "right",
    "vsicons.dontShowNewVersionMessage": true,
    "security.workspace.trust.untrustedFiles": "open",
    "editor.codeLensFontFamily": "JetBrainsMono Nerd Font",
    "editor.inlayHints.fontFamily": "JetBrainsMono Nerd Font",
    "files.trimTrailingWhitespace": true,
    "git.openRepositoryInParentFolders": "always",
    "terminal.integrated.macOptionIsMeta": true,
    // "terminal.integrated.macOptionClickForcesSelection": true,
    // "terminal.integrated.macOptionIsMeta": "left"
    "[shellscript]": {
        "editor.defaultFormatter": "mads-hartmann.bash-ide-vscode"
    },
    "editor.minimap.enabled": false,
    "terminal.integrated.profiles.osx": {
        "Zsh with Script": {
            "path": "zsh",
            "args": ["-c", "~/.local/bin/vscode_terminal.sh"]
        }
    },
    "terminal.integrated.defaultProfile.osx": "Zsh with Script"
}
