# awerebea's personal zsh scripts and functions

# Detect and setup current environment (home/school/docker)
# School-21
if [[ `uname -n` == *"21-school"* ]]; then
  export ZSH="/Users/awerebea/.oh-my-zsh"
  export DOCKER_CMD_FOR_ALIAS="docker"
  export GIT_DOTFILES="/Users/awerebea/Documents/Github/dotfiles"
  export GIT_WORKSPACE="/Users/awerebea/Documents/Github/workspace"
  alias norminette='/Users/awerebea/.scripts/colorised_norm.sh'
  alias o='a -e open' # quick opening files with open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }
  PATH=~/.local/bin:$PATH
  PATH=~/Library/Python/2.7/bin:$PATH
  source $HOME/.brewconfig.zsh
  alias ffoxprofile='/Volumes/Firefox/Firefox.app/Contents/MacOS/firefox-bin -P'
  alias ffox='open -n -a /Volumes/Firefox/Firefox.app --args -P awerebea'
  alias init_docker=". ${HOME}/42toolbox/init_docker.sh"
  alias settings_init=". ${HOME}/Documents/Github/dotfiles/school/init_school_settings.sh"
  alias init_minikube=". ${HOME}/Documents/Github/dotfiles/school/init_minikube.sh"
  defaults write -g ApplePressAndHoldEnabled -bool false
  # set coursor like blinking block
  printf '\e[1 q'

elif [[ `uname -n` == "pc-home" && `echo ${WSL_DISTRO_NAME}` == "Ubuntu" ]]; then
  # Home Ubuntu in WSL (Windows)
  export ZSH="/home/andrei/.oh-my-zsh"
  export DOCKER_CMD_FOR_ALIAS="sudo docker"
  export GIT_DOTFILES="/home/andrei/Github/dotfiles"
  export GIT_WORKSPACE="/home/andrei/Github/workspace"
  alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }
  alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  # set coursor like blinking block
  printf '\e[1 q'

elif [[ ( `uname -n` == "pc-home" || `uname -n` == "laptop-acer" ) && `uname` == "Linux" ]]; then
  # Manjaro @ home-pc & laptop-acer
  export ZSH="/home/andrei/.oh-my-zsh"
  export DOCKER_CMD_FOR_ALIAS="sudo docker"
  export GIT_DOTFILES="/run/media/andrei/awerebea/Github/dotfiles"
  export GIT_WORKSPACE="/run/media/andrei/awerebea/Github/workspace"
  export PATH="$PATH:/home/andrei/.local/share/gem/ruby/3.0.0/bin"
  alias norminette='/home/andrei/.config/.scripts/colorised_norm.sh'
  alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }
  alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  alias tmpunlink="sudo rm -f /var/tmp && sleep 1 && sudo mkdir /var/tmp"
  alias tmprelink="sudo rm -rf /var/tmp && sleep 1 && sudo ln -s /run/media/andrei/Data/Temp-lin/var/tmp/ /var/tmp"
  # The 1st command is to map CAPSLOCK to ESC whereas the 2nd one takes care of CTRL pressed with other keys
  # setxkbmap -option ctrl:nocaps
  # xcape -e 'Control_L=Escape'
  # set coursor like blinking block
  printf '\e[1 q'

elif [[ `uname -n` == "pc-home" && `uname` == "Darwin" ]]; then
  # Home macOS
  export ZSH="/Users/andrei/.oh-my-zsh"
  export DOCKER_CMD_FOR_ALIAS="docker"
  export GIT_DOTFILES="/Volumes/awerebea/Github/dotfiles"
  export GIT_WORKSPACE="/Volumes/awerebea/Github/workspace"
  alias norminette='/Users/andrei/.scripts/colorised_norm.sh'
  alias o='a -e open' # quick opening files with open
  alias sudo='sudo '
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }
  alias sudoedit="sudo vim"
  export PATH="$PATH:/Users/andrei/Library/Python/3.7/bin"
  export PATH="$PATH:/Users/andrei/.local/bin"
  if [ -x '/Users/andrei/.local/bin/vim' ]; then
    alias vim='/Users/andrei/.local/bin/vim'
    export EDITOR='/Users/andrei/.local/bin/vim'
  fi
  # set coursor like blinking block
  printf '\e[1 q'

elif [[ `uname -n` == "laptop-dell" && `uname` == "Linux" ]]; then
  # Work laptop
  export ZSH="/home/andrei/.oh-my-zsh"
  export DOCKER_CMD_FOR_ALIAS="sudo docker"
  export GIT_DOTFILES="/home/andrei/Documents/Github/dotfiles"
  export GIT_WORKSPACE="/home/andrei/Documents/Github/workspace"
  alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }
  alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  printf '\e[1 q'
  # Fix history-substring-search plugin behaviour in Tmux
  bindkey "$terminfo[kcuu1]" history-substring-search-up
  bindkey "$terminfo[kcud1]" history-substring-search-down

else
  export ZSH="$HOME/.oh-my-zsh"
  export GIT_DOTFILES="$HOME/Github/dotfiles"
  export GIT_WORKSPACE="$HOME/Github/workspace"
  alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }
  alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
fi

# Fix oh-my-zsh history-sync plugin
function zhistsyncplugfix() {
  sed -i "s/add\ \*/\"\$ZSH_HISTORY_FILE_ENC_NAME\"/" $ZSH/custom/plugins/history-sync/history-sync.plugin.zsh
  sed -i "s/GIT_COMMIT_MSG=\"latest \$(date)\"/GIT_COMMIT_MSG=\"Sync\ zsh\ history\"/" $ZSH/custom/plugins/history-sync/history-sync.plugin.zsh
  export GIT_COMMIT_MSG="Sync zsh history"
}

# fasd history sync via GitHub
function fhistsync() {
  echo "\e[1;33mNeed to pull before sync? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} pull; break;;
        [nN][oO]|[nN])
     echo "\e[1;33mLocal file used\e[0m"; break;;
        *)
     echo "\e[1;33mIncorrect input. Need to pool? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
  cat ${HOME}/.fasd >> ${GIT_WORKSPACE}/.fasd
  cat ${GIT_WORKSPACE}/.fasd | sort -t $'\|' -rk2 | awk -F"[|]" '!a[$1]++' > ${GIT_WORKSPACE}/.fasd_
  rm -f ${GIT_WORKSPACE}/.fasd ${HOME}/.fasd
  mv ${GIT_WORKSPACE}/.fasd_ ${GIT_WORKSPACE}/.fasd
  cp -rf ${GIT_WORKSPACE}/.fasd ${HOME}/.fasd
  git -C ${GIT_WORKSPACE} add .fasd
  git -C ${GIT_WORKSPACE} commit -m "Sync fasd history"
  echo "\e[1;33mfasd synced history commited, need to push? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} push origin; break;;
        [nN][oO]|[nN])
     break;;
        *)
     echo "\e[1;33mIncorrect input. Need to push? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
}

# "Forget" last N commands from history
# Put a space at the start of a command to make sure it doesn't get added to the history.
alias frgt=' my_remove_last_history_entry' # Added a space in 'my_remove_last_history_entry' so that zsh forgets the 'forget' command :).
my_remove_last_history_entry() {
    # This sub-function checks if the argument passed is a number.
    # Thanks to @yabt on stackoverflow for this :).
    is_int() ( return $(test "$@" -eq "$@" > /dev/null 2>&1); )
    # Set history file's location
    history_file="${ZSH_HISTORY_FILE}"
    history_temp_file="${history_file}.tmp"
    # Check if the user passed a number, so we can delete N lines from history.
    if [ $# -eq 0 ]; then
        # No arguments supplied, so set to one.
        lines_to_remove=1
    else
        # An argument passed. Check if it's a number.
        if $(is_int "${1}"); then
            lines_to_remove="$1"
        else
            echo "Unknown argument passed. Exiting..."
            return
        fi
    fi
    # fc -W # write current shell's history to the history file.
    sed "$(($(wc -l < $history_file)-$lines_to_remove + 1)),\$d" $history_file > $history_temp_file 2>/dev/null
    mv "$history_temp_file" "$history_file"
    fc -R # read history file.
}

# create git hooks for ctags tags update
function githooksctags() {
  touch -a .git/hooks/post-checkout
  grep -qxF '#!/bin/bash' .git/hooks/post-checkout || echo "#!/bin/bash" >> .git/hooks/post-checkout
  grep -qxF 'ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null' .git/hooks/post-checkout || echo "ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null" >> .git/hooks/post-checkout
  chmod +x .git/hooks/post-checkout
  touch -a .git/hooks/post-commit
  grep -qxF '#!/bin/bash' .git/hooks/post-commit || echo "#!/bin/bash" >> .git/hooks/post-commit
  grep -qxF 'ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null' .git/hooks/post-commit || echo "ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null" >> .git/hooks/post-commit
  chmod +x .git/hooks/post-commit
}

## bash and zsh only!
# functions to cd to the next or previous sibling directory, in glob order

prev () {
  # default to current directory if no previous
  local prevdir="./"
  local cwd=${PWD##*/}
  if [[ -z $cwd ]]; then
    # $PWD must be /
    echo 'No previous directory.' >&2
    return 1
  fi
  for x in ../*/; do
    if [[ ${x#../} == ${cwd}/ ]]; then
      # found cwd
      if [[ $prevdir == ./ ]]; then
        echo 'No previous directory.' >&2
        return 1
      fi
      cd "$prevdir"
      return
    fi
    if [[ -d $x ]]; then
      prevdir=$x
    fi
  done
  # Should never get here.
  echo 'Directory not changed.' >&2
  return 1
}

next () {
  local foundcwd=
  local cwd=${PWD##*/}
  if [[ -z $cwd ]]; then
    # $PWD must be /
    echo 'No next directory.' >&2
    return 1
  fi
  for x in ../*/; do
    if [[ -n $foundcwd ]]; then
      if [[ -d $x ]]; then
        cd "$x"
        return
      fi
    elif [[ ${x#../} == ${cwd}/ ]]; then
      foundcwd=1
    fi
  done
  echo 'No next directory.' >&2
  return 1
}

# Move Slack cache dir to goinfre
# CacheStorage
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/Library/Application Support/Slack/Service Worker/CacheStorage"
  NEWDIR="/goinfre/awerebea/Slack/CacheStorage"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

# Cache
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/Library/Application Support/Slack/Cache"
  NEWDIR="/goinfre/awerebea/Slack/Cache"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

# Move minikube dir to goinfre
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/.minikube"
  NEWDIR="/goinfre/awerebea/.minikube"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

# Move zoom records dir to goinfre
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/Documents/Zoom"
  NEWDIR="/goinfre/awerebea/Zoom"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

alias ghtkn="gpg $GIT_WORKSPACE/github_token.gpg; source $GIT_WORKSPACE/github_token; rm -f $GIT_WORKSPACE/github_token"
