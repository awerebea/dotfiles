# awerebea's personal zsh scripts and functions

# detect and setup current environment (home/school/docker)
if [[ `uname -n` == *"21-school"* ]]; then
  # School
  export ZSH="/Users/awerebea/.oh-my-zsh"
  export DOCKER_CMD_FOR_ALIAS="docker"
  export GIT_DOTFILES="/Users/awerebea/Documents/Github/dotfiles"
  export GIT_WORKSPACE="/Users/awerebea/Documents/Github/workspace"
  alias norminette='/Users/awerebea/.scripts/colorised_norm.sh'
  alias o='a -e open' # quick opening files with open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }

  PATH=~/.local/bin:$PATH
  PATH=~/Library/Python/2.7/bin:$PATH
  source $HOME/.brewconfig.zsh
  alias ffoxprofile='/Volumes/Firefox/Firefox.app/Contents/MacOS/firefox-bin -P'
  alias ffox='open -n -a /Volumes/Firefox/Firefox.app --args -P awerebea'
  alias init_docker=". ${HOME}/42toolbox/init_docker.sh"
  alias settings_init=". ${HOME}/Documents/Github/dotfiles/school/init_school_settings.sh"
  alias init_minikube=". ${HOME}/Documents/Github/dotfiles/school/init_minikube.sh"
elif [[ `uname -n` == "pc-home" ]] || [[ `uname -n` == "laptop-acer" ]]; then
  os=`uname`
  if [[ `uname` == "Linux" ]] && [[ `echo ${WSL_DISTRO_NAME}` == "Ubuntu" ]]; then
    # Home Ubuntu in WSL (Windows)
    export ZSH="/home/andrei/.oh-my-zsh"
    export DOCKER_CMD_FOR_ALIAS="sudo docker"
    export GIT_DOTFILES="/home/andrei/Github/dotfiles"
    export GIT_WORKSPACE="/home/andrei/Github/workspace"
    alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
    google() {
      search=""
      for term in $@; do
      search="$search%20$term"
      done
      xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
    }

    alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  elif [[ `uname` == "Linux" ]]; then
    # Home Manjaro
    export ZSH="/home/andrei/.oh-my-zsh"
    export DOCKER_CMD_FOR_ALIAS="sudo docker"
    export GIT_DOTFILES="/run/media/andrei/awerebea/Github/dotfiles"
    export GIT_WORKSPACE="/run/media/andrei/awerebea/Github/workspace"
    alias norminette='/home/andrei/.config/.scripts/colorised_norm.sh'
    alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
    google() {
      search=""
      for term in $@; do
      search="$search%20$term"
      done
      xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
    }

    alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
    alias tmpunlink="sudo rm -f /var/tmp && sleep 1 && sudo mkdir /var/tmp"
    alias tmprelink="sudo rm -rf /var/tmp && sleep 1 && sudo ln -s /run/media/andrei/Data/Temp-lin/var/tmp/ /var/tmp"
    # The 1st command is to map CAPSLOCK to ESC whereas the 2nd one takes care of CTRL pressed with other keys
    # setxkbmap -option ctrl:nocaps
    # xcape -e 'Control_L=Escape'
  elif [[ `uname` == "Darwin" ]]; then
    # Home macOS
    export ZSH="/Users/andrei/.oh-my-zsh"
    export DOCKER_CMD_FOR_ALIAS="docker"
    export GIT_DOTFILES="/Volumes/awerebea/Github/dotfiles"
    export GIT_WORKSPACE="/Volumes/awerebea/Github/workspace"
    alias norminette='/Users/andrei/.scripts/colorised_norm.sh'
    alias o='a -e open' # quick opening files with open
    google() {
      search=""
      for term in $@; do
      search="$search%20$term"
      done
      open "http://www.google.com/search?q=$search" >/dev/null 2>&1
    }

    alias keesync="cp -f /Volumes/Data/Distrib/_Personal\ Software/KeePass/keepass_Andrei.kdbx ~/Google\ Drive/Mobile/Keepass/"
    alias sudoedit="sudo vim"
  fi
else
  export ZSH="$HOME/.oh-my-zsh"
  export GIT_DOTFILES="$HOME/Github/dotfiles"
  export GIT_WORKSPACE="$HOME/Github/workspace"
  alias o='a -e xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
  google() {
    search=""
    for term in $@; do
    search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search" >/dev/null 2>&1
  }

  alias open='xdg-open >/dev/null 2>&1' # quick opening files with xdg-open
fi

# fix oh-my-zsh history-sync plugin
function zhistsyncplugfix() {
  sed -i "s/add\ \*/\"\$ZSH_HISTORY_FILE_ENC_NAME\"/" $ZSH/custom/plugins/history-sync/history-sync.plugin.zsh
  sed -i "s/GIT_COMMIT_MSG=\"latest \$(date)\"/GIT_COMMIT_MSG=\"Sync\ zsh\ history\"/" $ZSH/custom/plugins/history-sync/history-sync.plugin.zsh
  export GIT_COMMIT_MSG="Sync zsh history"
}

# fasd history sync via GitHub
function fhistsync() {
  echo "\e[1;33mNeed to pull before sync? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} pull; break;;
        [nN][oO]|[nN])
     echo "\e[1;33mLocal file used\e[0m"; break;;
        *)
     echo "\e[1;33mIncorrect input. Need to pool? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
  cat ${HOME}/.fasd >> ${GIT_WORKSPACE}/.fasd
  cat ${GIT_WORKSPACE}/.fasd | sort -t $'\|' -rk2 | awk -F"[|]" '!a[$1]++' > ${GIT_WORKSPACE}/.fasd_
  rm -f ${GIT_WORKSPACE}/.fasd ${HOME}/.fasd
  mv ${GIT_WORKSPACE}/.fasd_ ${GIT_WORKSPACE}/.fasd
  cp -rf ${GIT_WORKSPACE}/.fasd ${HOME}/.fasd
  git -C ${GIT_WORKSPACE} add .fasd
  git -C ${GIT_WORKSPACE} commit -m "Sync fasd history"
  echo "\e[1;33mfasd synced history commited, need to push? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} push origin; break;;
        [nN][oO]|[nN])
     break;;
        *)
     echo "\e[1;33mIncorrect input. Need to push? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
}

# tmux ressurection layout sync via GitHub
function trb() {
  cp ~/.tmux/resurrect/last ${GIT_WORKSPACE}/tmux_ressurection_backup.txt
  git -C ${GIT_WORKSPACE} add tmux_ressurection_backup.txt
  git -C ${GIT_WORKSPACE} commit -m "Backup tmux ressurect"
  echo "\e[1;33mtmux ressurect backup commited, need to push? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} push origin; break;;
        [nN][oO]|[nN])
     break;;
        *)
     echo "\e[1;33mIncorrect input. Need to push? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
}

function trr() {
  echo "\e[1;33mNeed to pull before restore? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} pull; break;;
        [nN][oO]|[nN])
     echo "\e[1;33mLocal file used\e[0m"; break;;
        *)
     echo "\e[1;33mIncorrect input. Need to pool? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
  tmp_file="${GIT_WORKSPACE}/tmux_ressurection_backup.tmp"
  cp ${GIT_WORKSPACE}/tmux_ressurection_backup.txt $tmp_file
  home_school="\/Users\/awerebea"
  home_home_linux="\/home\/andrei"
  home_home_mac="\/Users\/andrei\/"
  home_docker_linux="\/root\/"
  projects_school="\/Users\/awerebea\/projects"
  projects_home_linux="\/run\/media\/andrei\/awerebea\/school-21\/projects"
  projects_home_mac="\/Volumes\/awerebea\/school-21\/projects"
  projects_docker_linux="\/root\/projects"
  documents_school="\/Users\/awerebea\/Documents"
  documents_home_linux="\/run\/media\/andrei\/Data\/Documents"
  documents_home_mac="\/Volumes\/Data\/Documents"
  documents_docker_linux="\/root\/Documents"
  github_school="\/Users\/awerebea\/Documents\/Github"
  github_home_linux="\/run\/media\/andrei\/awerebea\/Github"
  github_home_mac="\/Volumes\/awerebea\/Github\/"
  github_docker_linux="\/root\/Github"
  rm -f ~/.tmux/resurrect/last
  if [[ `uname -n` == *"21-school"* ]]; then
    sed -i '' "s/$github_home_linux/$github_school/" $tmp_file
    sed -i '' "s/$documents_home_linux/$documents_school/" $tmp_file
    sed -i '' "s/$projects_home_linux/$projects_school/" $tmp_file
    sed -i '' "s/$home_home_linux/$home_school/" $tmp_file

    sed -i '' "s/$github_home_mac/$github_school/" $tmp_file
    sed -i '' "s/$documents_home_mac/$documents_school/" $tmp_file
    sed -i '' "s/$projects_home_mac/$projects_school/" $tmp_file
    sed -i '' "s/$home_home_mac/$home_school/" $tmp_file

    sed -i '' "s/$github_docker_linux/$github_school/" $tmp_file
    sed -i '' "s/$documents_docker_linux/$documents_school/" $tmp_file
    sed -i '' "s/$projects_docker_linux/$projects_school/" $tmp_file
    sed -i '' "s/$home_docker_linux/$home_school/" $tmp_file
  elif [[ `uname -n` == "pc-home" ]] || [[ `uname -n` == "laptop-acer" ]]; then
    if [[ `uname` == "Linux" ]]; then
      sed -i "s/$github_school/$github_home_linux/" $tmp_file
      sed -i "s/$documents_school/$documents_home_linux/" $tmp_file
      sed -i "s/$projects_school/$projects_home_linux/" $tmp_file
      sed -i "s/$home_school/$home_home_linux/" $tmp_file

      sed -i "s/$github_home_mac/$github_home_linux/" $tmp_file
      sed -i "s/$documents_home_mac/$documents_home_linux/" $tmp_file
      sed -i "s/$projects_home_mac/$projects_home_linux/" $tmp_file
      sed -i "s/$home_home_mac/$home_home_linux/" $tmp_file

      sed -i "s/$github_docker_linux/$github_home_linux/" $tmp_file
      sed -i "s/$documents_docker_linux/$documents_home_linux/" $tmp_file
      sed -i "s/$projects_docker_linux/$projects_home_linux/" $tmp_file
      sed -i "s/$home_docker_linux/$home_home_linux/" $tmp_file
    elif [[ `uname` == "Darwin" ]]; then
      sed -i '' "s/$github_school/$github_home_mac/" $tmp_file
      sed -i '' "s/$documents_school/$documents_home_mac/" $tmp_file
      sed -i '' "s/$projects_school/$projects_home_mac/" $tmp_file
      sed -i '' "s/$home_school/$home_home_mac/" $tmp_file

      sed -i '' "s/$github_home_linux/$github_home_mac/" $tmp_file
      sed -i '' "s/$documents_home_linux/$documents_home_mac/" $tmp_file
      sed -i '' "s/$projects_home_linux/$projects_home_mac/" $tmp_file
      sed -i '' "s/$home_home_linux/$home_home_mac/" $tmp_file

      sed -i '' "s/$github_docker_linux/$github_home_mac/" $tmp_file
      sed -i '' "s/$documents_docker_linux/$documents_home_mac/" $tmp_file
      sed -i '' "s/$projects_docker_linux/$projects_home_mac/" $tmp_file
      sed -i '' "s/$home_docker_linux/$home_home_mac/" $tmp_file
    fi
  elif [[ `uname -n` == "Linux" ]] && [[ `echo -n \"$(whoami)\"` == "root" ]]; then
    sed -i "s/$github_school/$github_docker_linux/" $tmp_file
    sed -i "s/$documents_school/$documents_docker_linux/" $tmp_file
    sed -i "s/$projects_school/$projects_docker_linux/" $tmp_file
    sed -i "s/$home_school/$home_docker_linux/" $tmp_file

    sed -i "s/$github_home_linux/$github_docker_linux/" $tmp_file
    sed -i "s/$documents_home_linux/$documents_docker_linux/" $tmp_file
    sed -i "s/$projects_home_linux/$projects_docker_linux/" $tmp_file
    sed -i "s/$home_home_linux/$home_docker_linux/" $tmp_file

    sed -i "s/$github_home_mac/$github_docker_linux/" $tmp_file
    sed -i "s/$documents_home_mac/$documents_docker_linux/" $tmp_file
    sed -i "s/$projects_home_mac/$projects_docker_linux/" $tmp_file
    sed -i "s/$home_home_mac/$home_docker_linux/" $tmp_file
  fi
  mv $tmp_file ~/.tmux/resurrect/tmux_ressurection_restore.txt
  ln -s ~/.tmux/resurrect/tmux_ressurection_restore.txt ~/.tmux/resurrect/last
}

# "Forget" last N commands from history
# Put a space at the start of a command to make sure it doesn't get added to the history.
alias frgt=' my_remove_last_history_entry' # Added a space in 'my_remove_last_history_entry' so that zsh forgets the 'forget' command :).
my_remove_last_history_entry() {
    # This sub-function checks if the argument passed is a number.
    # Thanks to @yabt on stackoverflow for this :).
    is_int() ( return $(test "$@" -eq "$@" > /dev/null 2>&1); )
    # Set history file's location
    history_file="${ZSH_HISTORY_FILE}"
    history_temp_file="${history_file}.tmp"
    # Check if the user passed a number, so we can delete N lines from history.
    if [ $# -eq 0 ]; then
        # No arguments supplied, so set to one.
        lines_to_remove=1
    else
        # An argument passed. Check if it's a number.
        if $(is_int "${1}"); then
            lines_to_remove="$1"
        else
            echo "Unknown argument passed. Exiting..."
            return
        fi
    fi
    # fc -W # write current shell's history to the history file.
    sed "$(($(wc -l < $history_file)-$lines_to_remove + 1)),\$d" $history_file > $history_temp_file 2>/dev/null
    mv "$history_temp_file" "$history_file"
    fc -R # read history file.
}

# create git hooks for ctags tags update
function githooksctags() {
  touch -a .git/hooks/post-checkout
  grep -qxF '#!/bin/bash' .git/hooks/post-checkout || echo "#!/bin/bash" >> .git/hooks/post-checkout
  grep -qxF 'ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null' .git/hooks/post-checkout || echo "ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null" >> .git/hooks/post-checkout
  chmod +x .git/hooks/post-checkout
  touch -a .git/hooks/post-commit
  grep -qxF '#!/bin/bash' .git/hooks/post-commit || echo "#!/bin/bash" >> .git/hooks/post-commit
  grep -qxF 'ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null' .git/hooks/post-commit || echo "ctags -R --fields=+l --tag-relative=yes --exclude=.git --exclude=.gitignore --exclude=@.gitignore --exclude=@.ctagsignore -f .git/tags 2>/dev/null" >> .git/hooks/post-commit
  chmod +x .git/hooks/post-commit
}

## bash and zsh only!
# functions to cd to the next or previous sibling directory, in glob order

prev () {
  # default to current directory if no previous
  local prevdir="./"
  local cwd=${PWD##*/}
  if [[ -z $cwd ]]; then
    # $PWD must be /
    echo 'No previous directory.' >&2
    return 1
  fi
  for x in ../*/; do
    if [[ ${x#../} == ${cwd}/ ]]; then
      # found cwd
      if [[ $prevdir == ./ ]]; then
        echo 'No previous directory.' >&2
        return 1
      fi
      cd "$prevdir"
      return
    fi
    if [[ -d $x ]]; then
      prevdir=$x
    fi
  done
  # Should never get here.
  echo 'Directory not changed.' >&2
  return 1
}

next () {
  local foundcwd=
  local cwd=${PWD##*/}
  if [[ -z $cwd ]]; then
    # $PWD must be /
    echo 'No next directory.' >&2
    return 1
  fi
  for x in ../*/; do
    if [[ -n $foundcwd ]]; then
      if [[ -d $x ]]; then
        cd "$x"
        return
      fi
    elif [[ ${x#../} == ${cwd}/ ]]; then
      foundcwd=1
    fi
  done
  echo 'No next directory.' >&2
  return 1
}

# ranger list files backup
function rangerbckp() {
  cat ${HOME}/.config/ranger/bookmarks >> ${GIT_WORKSPACE}/ranger/bookmarks
  if [[ `uname` == "Linux" ]]; then
    cat -n ${GIT_WORKSPACE}/ranger/bookmarks | awk '{$2=":" OFS $2} 1'| LC_ALL=C sort -t $':' -k2r,2 -s | tac | awk -F"[:]" '!a[$2]++' | LC_ALL=C cut -d " " -f 3- > ${GIT_WORKSPACE}/ranger/bookmarks_
  elif [[ `uname` == "Darwin" ]]; then
    cat -n ${GIT_WORKSPACE}/ranger/bookmarks | awk '{$2=":" OFS $2} 1'| LC_ALL=C sort -t $':' -k2r,2 -s | tail -r | awk -F"[:]" '!a[$2]++' | LC_ALL=C cut -d " " -f 3- > ${GIT_WORKSPACE}/ranger/bookmarks_
  fi
  rm -f ${GIT_WORKSPACE}/ranger/bookmarks
  mv ${GIT_WORKSPACE}/ranger/bookmarks_ ${GIT_WORKSPACE}/ranger/bookmarks

  cat ${HOME}/.config/ranger/tagged >> ${GIT_WORKSPACE}/ranger/tagged
  cat ${GIT_WORKSPACE}/ranger/tagged | sort -t $':' -uk1 > ${GIT_WORKSPACE}/ranger/tagged_
  rm -f ${GIT_WORKSPACE}/ranger/tagged
  mv ${GIT_WORKSPACE}/ranger/tagged_ ${GIT_WORKSPACE}/ranger/tagged

  cat -n ${HOME}/.config/ranger/history > ${GIT_WORKSPACE}/ranger/history_
  cat -n ${GIT_WORKSPACE}/ranger/history >> ${GIT_WORKSPACE}/ranger/history_
  cat ${GIT_WORKSPACE}/ranger/history_ | LC_ALL=C sort -t' ' -k2 | LC_ALL=C cut -f2- | awk '!seen[$0]++ {print}' > ${GIT_WORKSPACE}/ranger/history
  rm -f ${GIT_WORKSPACE}/ranger/history_

  git -C ${GIT_WORKSPACE}/ranger add bookmarks history tagged
  git -C ${GIT_WORKSPACE} commit -m "Sync ranger list files"
  echo "\e[1;33mranger backup commited, need to push? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} push origin; break;;
        [nN][oO]|[nN])
     break;;
        *)
     echo "\e[1;33mIncorrect input. Need to push? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
}

function rangerrest() {
  echo "\e[1;33mNeed to pull before restore? (y/N)\e[0m"
  while true; do
    read -r input
    case $input in
        [yY][eE][sS]|[yY])
     git -C ${GIT_WORKSPACE} pull; break;;
        [nN][oO]|[nN])
     echo "\e[1;33mLocal file used\e[0m"; break;;
        *)
     echo "\e[1;33mIncorrect input. Need to pool? Answer: \e[1;32mYes\e[1;33m/\e[1;31mNo \e[1;32my\e[1;33m/\e[1;31mn \e[1;32mY\e[1;33m/\e[1;31mN\e[0m";;
    esac
  done
  tmp_bookmarks="${GIT_WORKSPACE}/ranger/bookmarks_"
  tmp_tagged="${GIT_WORKSPACE}/ranger/tagged_"
  home_school="\/Users\/awerebea"
  home_home_linux="\/home\/andrei"
  home_home_mac="\/Users\/andrei\/"
  home_docker_linux="\/root\/"
  projects_school="\/Users\/awerebea\/projects"
  projects_home_linux="\/run\/media\/andrei\/awerebea\/school-21\/projects"
  projects_home_mac="\/Volumes\/awerebea\/school-21\/projects"
  projects_docker_linux="\/root\/projects"
  documents_school="\/Users\/awerebea\/Documents"
  documents_home_linux="\/run\/media\/andrei\/Data\/Documents"
  documents_home_mac="\/Volumes\/Data\/Documents"
  documents_docker_linux="\/root\/Documents"
  github_school="\/Users\/awerebea\/Documents\/Github"
  github_home_linux="\/run\/media\/andrei\/awerebea\/Github"
  github_home_mac="\/Volumes\/awerebea\/Github\/"
  github_docker_linux="\/root\/Github"
  cp ${GIT_WORKSPACE}/ranger/bookmarks $tmp_bookmarks
  cp ${GIT_WORKSPACE}/ranger/tagged $tmp_tagged
  rm -f ~/.tmux/resurrect/last
  if [[ `uname -n` == *"21-school"* ]]; then
    sed -i '' "s/$github_home_linux/$github_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$documents_home_linux/$documents_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$projects_home_linux/$projects_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$home_home_linux/$home_school/" $tmp_bookmarks $tmp_tagged

    sed -i '' "s/$github_home_mac/$github_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$documents_home_mac/$documents_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$projects_home_mac/$projects_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$home_home_mac/$home_school/" $tmp_bookmarks $tmp_tagged

    sed -i '' "s/$github_docker_linux/$github_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$documents_docker_linux/$documents_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$projects_docker_linux/$projects_school/" $tmp_bookmarks $tmp_tagged
    sed -i '' "s/$home_docker_linux/$home_school/" $tmp_bookmarks $tmp_tagged
  elif [[ `uname -n` == "pc-home" || `uname -n` == "laptop-acer" ]]; then
    if [[ `uname` == "Linux" ]]; then
      sed -i "s/$github_school/$github_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$documents_school/$documents_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$projects_school/$projects_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$home_school/$home_home_linux/" $tmp_bookmarks $tmp_tagged

      sed -i "s/$github_home_mac/$github_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$documents_home_mac/$documents_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$projects_home_mac/$projects_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$home_home_mac/$home_home_linux/" $tmp_bookmarks $tmp_tagged

      sed -i "s/$github_docker_linux/$github_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$documents_docker_linux/$documents_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$projects_docker_linux/$projects_home_linux/" $tmp_bookmarks $tmp_tagged
      sed -i "s/$home_docker_linux/$home_home_linux/" $tmp_bookmarks $tmp_tagged
    elif [[ `uname` == "Darwin" ]]; then
      sed -i '' "s/$github_school/$github_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$documents_school/$documents_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$projects_school/$projects_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$home_school/$home_home_mac/" $tmp_bookmarks $tmp_tagged

      sed -i '' "s/$github_home_linux/$github_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$documents_home_linux/$documents_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$projects_home_linux/$projects_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$home_home_linux/$home_home_mac/" $tmp_bookmarks $tmp_tagged

      sed -i '' "s/$github_docker_linux/$github_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$documents_docker_linux/$documents_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$projects_docker_linux/$projects_home_mac/" $tmp_bookmarks $tmp_tagged
      sed -i '' "s/$home_docker_linux/$home_home_mac/" $tmp_bookmarks $tmp_tagged
    fi
  elif [[ `uname -n` == "Linux" ]] && [[ `echo -n \"$(whoami)\"` == "root" ]]; then
    sed -i "s/$github_school/$github_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$documents_school/$documents_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$projects_school/$projects_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$home_school/$home_docker_linux/" $tmp_bookmarks $tmp_tagged

    sed -i "s/$github_home_linux/$github_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$documents_home_linux/$documents_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$projects_home_linux/$projects_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$home_home_linux/$home_docker_linux/" $tmp_bookmarks $tmp_tagged

    sed -i "s/$github_home_mac/$github_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$documents_home_mac/$documents_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$projects_home_mac/$projects_docker_linux/" $tmp_bookmarks $tmp_tagged
    sed -i "s/$home_home_mac/$home_docker_linux/" $tmp_bookmarks $tmp_tagged
  fi
  cat $tmp_bookmarks >> ${HOME}/.config/ranger/bookmarks
  if [[ `uname` == "Linux" ]]; then
    cat -n ${HOME}/.config/ranger/bookmarks | awk '{$2=":" OFS $2} 1'| LC_ALL=C sort -t $':' -k2r,2 -s | tac | awk -F"[:]" '!a[$2]++' | LC_ALL=C cut -d " " -f 3- > ${HOME}/.config/ranger/bookmarks_
  elif [[ `uname` == "Darwin" ]]; then
    cat -n ${HOME}/.config/ranger/bookmarks | awk '{$2=":" OFS $2} 1'| LC_ALL=C sort -t $':' -k2r,2 -s | tail -r | awk -F"[:]" '!a[$2]++' | LC_ALL=C cut -d " " -f 3- > ${HOME}/.config/ranger/bookmarks_
  fi
  rm -f ${HOME}/.config/ranger/bookmarks
  mv ${HOME}/.config/ranger/bookmarks_ ${HOME}/.config/ranger/bookmarks

  cat $tmp_tagged >> ${HOME}/.config/ranger/tagged
  cat ${HOME}/.config/ranger/tagged | sort -t $':' -uk1 > ${HOME}/.config/ranger/tagged_
  rm -f ${HOME}/.config/ranger/tagged
  mv ${HOME}/.config/ranger/tagged_ ${HOME}/.config/ranger/tagged

  cat -n ${GIT_WORKSPACE}/ranger/history > ${HOME}/.config/ranger/history_
  cat -n ${HOME}/.config/ranger/history >> ${HOME}/.config/ranger/history_
  cat ${HOME}/.config/ranger/history_ | LC_ALL=C sort -t' ' -k2 | LC_ALL=C cut -f2- | awk '!seen[$0]++ {print}' > ${HOME}/.config/ranger/history
  rm -f ${HOME}/.config/ranger/history_
  rm -f $tmp_bookmarks
  rm -f $tmp_tagged
}

# Move Slack cache dir to goinfre
# CacheStorage
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/Library/Application Support/Slack/Service Worker/CacheStorage"
  NEWDIR="/goinfre/awerebea/Slack/CacheStorage"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

# Cache
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/Library/Application Support/Slack/Cache"
  NEWDIR="/goinfre/awerebea/Slack/Cache"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

# Move minikube dir to goinfre
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/.minikube"
  NEWDIR="/goinfre/awerebea/.minikube"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi

# Move zoom records dir to goinfre
if [[ `uname -n` == *"21-school"* ]]; then
  OLDDIR="/Users/awerebea/Documents/Zoom"
  NEWDIR="/goinfre/awerebea/Zoom"
  if [ ! -d "$NEWDIR" ]; then
    mkdir -p $NEWDIR
  fi
  if [ -d "$OLDDIR" ]; then
    if [ ! -L $OLDDIR ] ; then
      cp -r $OLDDIR/* $NEWDIR/ >/dev/null 2>&1
      rm -rf $OLDDIR
      ln -s $NEWDIR $OLDDIR
    fi
  elif [ -L $OLDDIR ] ; then
     if [ ! -e $OLDDIR ] ; then
        rm -f $OLDDIR
        ln -s $NEWDIR $OLDDIR
     fi
  elif [ -e $OLDDIR ] ; then
    rm -rf $OLDDIR
    ln -s $NEWDIR $OLDDIR
  else
    ln -s $NEWDIR $OLDDIR
  fi
fi
